import 'dart:async';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flexiscan101/Custom%20Modules/Online-Sessions/index.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flexiscan101/Custom%20Modules/Online-Sessions/constants.dart';

class CallPage extends StatefulWidget {
  final String? channelName;
  const CallPage({super.key, this.channelName});

  @override
  State<CallPage> createState() => _MyWidgetState();
}

class _MyWidgetState extends State<CallPage> {
  bool isJoined = true,
      switchCamera = true,
      switchRender = true,
      openCamera = true,
      muteCamera = false,
      muteAllRemoteVideo = false,
      muteMic = false;
  int? _remoteUid; // The UID of the remote user
  bool _localUserJoined = false; // Indicates whether the local user has joined the channel
  late RtcEngine _engine; // The RtcEngine instances
  @override
  void initState() {
    super.initState();
     initAgora();
  }
  
Future<void> initAgora() async {
    // Get microphone and camera permissions
    // await [Permission.microphone, Permission.camera].request();
    // Create RtcEngine instance
    _engine = await createAgoraRtcEngine();
    // Initialize RtcEngine and set the channel profile to live broadcasting
    await _engine.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));
    // Add an event handler
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint('local user ' + connection.localUid.toString() + ' joined');
          setState(() {
            _localUserJoined = true;
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
          setState(() {
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          debugPrint("remote user $remoteUid left channel");
          setState(() {
            _remoteUid = null;
          });
        },onError: (ErrorCodeType errorCode, String errorDescription) {
      debugPrint("Agora Error: $errorCode - $errorDescription");
    },
      ),
    );
    // Enable the video module
    await _engine.enableVideo();
    // Enable local video preview
    await _engine.startPreview();
    if (widget.channelName == null) {
  throw "Channel name cannot be null!";
}
    // Join a channel using a temporary token and channel name
    await _engine.joinChannel(
      token: token,
      channelId: widget.channelName!,
      options: const ChannelMediaOptions(
        // Automatically subscribe to all video streams
        autoSubscribeVideo: true,
        // Automatically subscribe to all audio streams
        autoSubscribeAudio: true,
        // Publish camera video 
        publishCameraTrack: true,
        // Publish microphone audio 
        publishMicrophoneTrack: true,
        // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
        clientRoleType: ClientRoleType.clientRoleBroadcaster),
      uid: 0, // When you set uid to 0, a user name is randomly generated by the engine
    );
  }
  @override
  void dispose() {
    super.dispose();
    _dispose();
  }
  Future<void> _dispose() async {
    // Leave the channel
    await _engine.leaveChannel();
    // Release resources
    await _engine.release(); 
  }
  // Build the UI to display local and remote videos
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Agora Video Call'),
        ),
        body: Stack(
          children: [
            Center(
              child: _remoteVideo(widget.channelName),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: SizedBox(
                width: 100,
                height: 150,
                child: Center(
                  child: _localUserJoined
                      ? AgoraVideoView(
                          controller: VideoViewController(
                            rtcEngine: _engine,
                            canvas: const VideoCanvas(uid: 0),
                          ),
                        )
                      : const CircularProgressIndicator(),
                ),
              ),
            ),Positioned(
        bottom: 50, // Adjust as needed
        left: 0,
        right: 0,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // Mic Button
              IconButton(
                icon: Icon(muteMic ? Icons.mic_off : Icons.mic),
                onPressed: _muteMicrophone, // Toggle mic
                color: muteMic ? Colors.red : Colors.white,
                iconSize: 30,
              ),
              
              // // Join Channel Button (when not joined)
              // ElevatedButton(
              //   onPressed: isJoined ? null : _joinChannel, // Join if not already joined
              //   child: Text(isJoined ? 'Joined' : 'Join Channel'),
              //   style: ElevatedButton.styleFrom(
              //     iconColor: isJoined ? Colors.green : Colors.blue, // Different color if joined
              //   ),
              // ),
              
              // End Call Button (when joined)
              ElevatedButton(
                onPressed: isJoined ? _leaveChannel : null, // Leave if joined
                child: Text('End Call'),
                style: ElevatedButton.styleFrom(iconColor: Colors.red),
              ),
              
              // Switch Camera Button
              IconButton(
                icon: Icon(switchCamera ? Icons.camera_front : Icons.camera_rear),
                onPressed: _switchCamera, // Switch camera
                color: Colors.white,
                iconSize: 30,
              ),
            ],
          ),
        ),
      ),
          ],
        ),
      ),
    );
  }
   Future<void> _leaveChannel() async {
    await _engine.leaveChannel();
    setState(() {
      openCamera = true;
      muteCamera = false;
      muteAllRemoteVideo = false;
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => OnlineSessionsIndex(),));
    });
  }

  Future<void> _switchCamera() async {
    await _engine.switchCamera();
    setState(() {
      switchCamera = !switchCamera;
    });
  }

  _openCamera() async {
    await _engine.enableLocalVideo(!openCamera);
    setState(() {
      openCamera = !openCamera;
    });
  }

  _muteLocalVideoStream() async {
    await _engine.muteLocalVideoStream(!muteCamera);
    setState(() {
      muteCamera = !muteCamera;
    });
  }
  _muteMicrophone() async {
    await _engine.muteLocalAudioStream(!muteMic);
    setState(() {
      muteMic = !muteMic;
    });
  }

  _muteAllRemoteVideoStreams() async {
    await _engine.muteAllRemoteVideoStreams(!muteAllRemoteVideo);
    setState(() {
      muteAllRemoteVideo = !muteAllRemoteVideo;
    });
  }
  // Widget to display remote video
  Widget _remoteVideo(String? channelName) {
    if (_remoteUid != null) {
      return AgoraVideoView(
        controller: VideoViewController.remote(
          rtcEngine: _engine,
          canvas: VideoCanvas(uid: _remoteUid),
          connection: RtcConnection(channelId: channelName),
        ),
      );
    } else {
      return const Text(
        'Please wait for remote user to join',
        textAlign: TextAlign.center,
      );
    }
  }
}